syntax = "proto3";
package kiss.resources;
option go_package = "github.com/ovotech/kiss/proto";

// Required information from client for every request
message ClientMeta {
    // k8s "namespace" the client wants to operate _for_
    // nb: we're not actually interacting with k8s here
    // we use tags on AWS resources to control which k8s namespace secrets are _for_
    string namespace = 1;
}

service KISS {
    // Temporary RPC to test authorization; will be removed.
    rpc Ping (PingRequest) returns (PingResponse) {}
    rpc CreateSecret(CreateSecretRequest) returns (CreateSecretResponse) {}
    rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse) {}
    rpc DeleteSecret(DeleteSecretRequest) returns (DeleteSecretResponse) {}
    rpc BindSecret(BindSecretRequest) returns (BindSecretResponse) {}
    rpc CreateSecretIAMPolicy(CreateSecretIAMPolicyRequest) returns (CreateSecretIAMPolicyResponse) {}
    rpc DeleteSecretIAMPolicy(DeleteSecretIAMPolicyRequest) returns (DeleteSecretIAMPolicyResponse) {}
}

message PingRequest {
    ClientMeta metadata = 1;
}

message PingResponse {}

message CreateSecretRequest {
    ClientMeta metadata = 1;
    string name = 2;
    string value = 3;
}

message CreateSecretResponse {}

message ListSecretsRequest {
    ClientMeta metadata = 1;
}

message ListSecretsResponse {
    repeated string secrets = 1;
}

message BindSecretRequest {
    ClientMeta metadata = 1;
    string name = 2;
    string serviceAccountName = 3;
}

message BindSecretResponse {}

message CreateSecretIAMPolicyRequest {
    ClientMeta metadata = 1;
    string name = 2;
}

message CreateSecretIAMPolicyResponse {}

message DeleteSecretRequest {
    ClientMeta metadata = 1;
    string name = 2;
}

message DeleteSecretResponse {}

message DeleteSecretIAMPolicyRequest {
    ClientMeta metadata = 1;
    string name = 2;
}

message DeleteSecretIAMPolicyResponse {}