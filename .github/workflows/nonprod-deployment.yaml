name: nonprod-deployment

on:
  workflow_run:
    workflows: ["integration"]
    types: 
      - completed

jobs:
  build:
    # only run this if the workflow dependency was a success
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # using this action makes Docker layer caching easier:
    # https://www.docker.com/blog/docker-github-actions/
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: server/Dockerfile
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/kaluza_infrastructure_secret_service_server:${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
        builder: ${{ steps.buildx.outputs.name }}

    # prevent cache from growing too large
    # https://github.com/docker/build-push-action/issues/252
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    # - name: Get account ID
    #   id: get_account_id
    #   run: |
    #     echo ::set-output name=AWS_ACCOUNT_ID::$(aws sts get-caller-identity | jq -r '.Account')
    # - name: Get the tag
    #   id: get_tag
    #   run: echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\//}
    # - name: Get the commit
    #   id: get_commit
    #   run: echo ::set-output name=TAG::${GITHUB_SHA} 
    # # - name: Build image
    # #   run: |
    # #     docker build . -f server/Dockerfile -t ${{ steps.get_account_id.outputs.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/kaluza_infrastructure_secret_service_server:${{ steps.get_commit.outputs.TAG }}
    # - name: debug tag
    #   run: |
    #     echo ${{ steps.get_account_id.outputs.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/kaluza_infrastructure_secret_service_server:${{ steps.get_commit.outputs.TAG }} | base64
    # - name: Get ECR token
    #   id: get_ecr_token
    #   run: echo ::set-output name=ECR_TOKEN::$(aws ecr get-login-password)
    # # - name: Login to ECR
    # #   run: |
    # #     docker login --username AWS --password ${{ steps.get_ecr_token.outputs.ECR_TOKEN }} ${{ steps.get_account_id.outputs.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com
    # # - name: Push image to ECR
    # #   run: |
    # #     docker push ${{ steps.get_account_id.outputs.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/kaluza_infrastructure_secret_service_server:${{ steps.get_commit.outputs.TAG }}
