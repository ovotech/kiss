# Builds and push the server image to nonprod ECR
# Runs on both PRs and releases, provided integation tests were successful
# NB: workflows that run on workflow_run use the workflow file from the main branch

name: build-nonprod

on:
  workflow_run:
    workflows: [integration]
    types: [completed]

jobs:
  build_server_image:
    # only run this job if the dependency workflow was a success
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    environment: nonprod
    env:
      ECR_REPOSITORY: orion-security-engineering/kiss
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with: 
        ref: ${{ github.event.workflow_run.head_branch }}

    # if it's a release we get the docker image tag from the branch
    # (this will be the git tag)
    # if it's a pull_request, we set the docker image tag to the short commit SHA
    - name: Get image tag
      id: get_image_tag
      run: |
        if [[ ${{ github.event.workflow_run.event }} == "release" ]]
        then
          echo "::set-output name=tag::${{ github.event.workflow_run.head_branch }}"
        elif [[ ${{ github.event.workflow_run.event }} == "pull_request" ]]
        then
          echo "::set-output name=tag::$(git rev-parse --short HEAD)"
        else
          exit 1
        fi

    # using this action makes Docker layer caching easier:
    # https://www.docker.com/blog/docker-github-actions/
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: server/Dockerfile
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.get_image_tag.outputs.tag }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
        builder: ${{ steps.buildx.outputs.name }}

    # prevent cache from growing too large
    # https://github.com/docker/build-push-action/issues/252
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
 
